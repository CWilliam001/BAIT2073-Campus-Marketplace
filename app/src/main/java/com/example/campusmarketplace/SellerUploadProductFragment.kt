package com.example.campusmarketplace

import android.net.Uri
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.NavController
import androidx.navigation.fragment.findNavController
import com.example.campusmarketplace.databinding.FragmentSellerUploadProductBinding
import com.example.campusmarketplace.model.SellerProduct
import com.squareup.picasso.Picasso

class SellerUploadProductFragment : Fragment() {
    private lateinit var binding: FragmentSellerUploadProductBinding
    private lateinit var navController: NavController
    private lateinit var productAdapter: SellerProductListAdaptor
    private val viewModel: SellerProductViewModel by lazy {
        ViewModelProvider(this).get(SellerProductViewModel::class.java)
    }
    private lateinit var getPhotoPicker: ActivityResultLauncher<String>
    private var imageUri: Uri?=null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = FragmentSellerUploadProductBinding.inflate(inflater, container, false)
        return binding.root


    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // Initialize the ActivityResultLauncher
        getPhotoPicker = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->
            // Handle the selected image URI
            uri?.let {
                imageUri = uri
                // Load the selected image into an ImageView using Picasso or another image loading library
                Picasso.get().load(uri).into(binding.ivProductImageUpload)
            }
        }

        binding.ivProductImageUpload.setOnClickListener {
            // Launch the image picker
            getPhotoPicker.launch("image/*")
        }

        binding.btnUpload.setOnClickListener {
            addProduct()
        }
    }

    private fun addProduct() {
        if(validateInput()){
            val product = SellerProduct(
                "", // Assuming productID is autogenerated by Firebase
                binding.etProductName.text.toString(),
                binding.etProductDescription.text.toString(),
                binding.spCategory.selectedItem.toString(),
                binding.etProductPrice.text.toString(),
                binding.spProductCondition.selectedItem.toString(),
                binding.spUsageDuration.selectedItem.toString(),
                imageUri.toString() // Add image URI to product
            )
            viewModel.insertItem(product, imageUri)
            // Navigate Back
            findNavController().popBackStack()
        }
        return
    }

    private fun validateInput(): Boolean {
        val productName = binding.etProductName.text.toString().trim()
        val productDescription = binding.etProductDescription.text.toString().trim()
        val productPrice = binding.etProductPrice.text.toString().trim()

        // Check if any field is empty
        if (imageUri == null) {
            Toast.makeText(requireContext(), "You have not chosen any product picture", Toast.LENGTH_SHORT).show()
            return false
        }
        if(productName.isEmpty()){
            binding.etProductName.setError(getString(R.string.required_input))
            return false
        }
        if(productDescription.isEmpty()){
            binding.etProductDescription.setError(getString(R.string.required_input))
            return false
        }
        if(productPrice.isEmpty()){
            binding.etProductPrice.setError(getString(R.string.required_input))
            return false
        }
        if (!isValidProductPrice(productPrice)) {
            binding.etProductPrice.setError("Enter a valid product price (e.g., 9999.99)")
            return false
        }
        return true
    }

    private fun isValidProductPrice(productPrice: String): Boolean {
        val regex = "^\\d{1,4}(\\.\\d{1,2})?\$".toRegex()
        return productPrice.matches(regex)
    }
}