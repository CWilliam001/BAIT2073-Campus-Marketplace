package com.example.campusmarketplace

import android.app.AlertDialog
import android.content.Context
import android.net.Uri
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.NavController
import androidx.navigation.fragment.findNavController
import com.example.campusmarketplace.databinding.FragmentSellerUploadProductBinding
import com.example.campusmarketplace.model.SellerProduct
import com.squareup.picasso.Picasso
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

class SellerUploadProductFragment : Fragment() {
    private lateinit var binding: FragmentSellerUploadProductBinding
    private lateinit var navController: NavController
    private lateinit var productAdapter: SellerProductListAdaptor
    private val viewModel: SellerProductViewModel by lazy {
        ViewModelProvider(this).get(SellerProductViewModel::class.java)
    }
    private lateinit var getPhotoPicker: ActivityResultLauncher<String>
    private var imageUri: Uri? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = FragmentSellerUploadProductBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // Initialize the ActivityResultLauncher
        getPhotoPicker = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->
            // Handle the selected image URI
            uri?.let {
                imageUri = uri
                // Load the selected image into an ImageView using Picasso or another image loading library
                Picasso.get().load(uri).into(binding.ivProductImageUpload)
            }
        }

        binding.ivProductImageUpload.setOnClickListener {
            // Launch the image picker
            getPhotoPicker.launch("image/*")
        }

        binding.btnUpload.setOnClickListener {
            if (validateInput()) {
                showConfirmationDialog()
            }
        }

        binding.btnUp.setOnClickListener {
            val builder = AlertDialog.Builder(requireContext())
            builder.setTitle("Confirmation")
            builder.setMessage("Discard this product?")
            builder.setPositiveButton("Discard") { _, _ ->
                // Perform up navigation
                findNavController().navigateUp()
            }
            builder.setNegativeButton("Cancel") { dialog, _ ->
                dialog.dismiss()
            }
            val dialog = builder.create()
            dialog.show()
        }
    }

    private fun addProduct() {
        val sharedPreferences =
            requireContext().getSharedPreferences("user_data", Context.MODE_PRIVATE)
        val userID = sharedPreferences.getString("userID", null)

        val uploadTime = getCurrentTimestamp()

        val product = SellerProduct(
            "", // Assuming productID is autogenerated by Firebase
            binding.etProductName.text.toString(),
            binding.etProductDescription.text.toString(),
            binding.spCategory.selectedItem.toString(),
            binding.etProductPrice.text.toString(),
            binding.spProductCondition.selectedItem.toString(),
            binding.spUsageDuration.selectedItem.toString(),
            uploadTime,
            userID.toString(),
            " ",
            " ",
            " ",
            false,
            false,
            false,
            "",
            imageUri.toString() // Add image URI to product,

        )
        viewModel.insertItem(product, imageUri)

        Toast.makeText(requireContext(), "Successfully uploaded product", Toast.LENGTH_SHORT * 3).show()

        // Navigate Back
        findNavController().navigateUp()
    }

    private fun getCurrentTimestamp(): String {
        val sdf = SimpleDateFormat("dd-MM-yyyy HH:mm", Locale.getDefault())
        return sdf.format(Date())

    }

    private fun validateInput(): Boolean {
        val productName = binding.etProductName.text.toString().trim()
        val productDescription = binding.etProductDescription.text.toString().trim()
        val productPrice = binding.etProductPrice.text.toString().trim().toDoubleOrNull()

        // Check if any field is empty
        if (imageUri == null) {
            Toast.makeText(requireContext(), "Please upload image of product", Toast.LENGTH_SHORT)
                .show()
            return false
        }
        if (productName.isEmpty()) {
            binding.etProductName.error = getString(R.string.required_input)
            return false
        }
        if (productDescription.isEmpty()) {
            binding.etProductDescription.error = getString(R.string.required_input)
            return false
        }
        if (productPrice == null) {
            binding.etProductPrice.error = getString(R.string.required_input)
            return false
        }
        if (productPrice == 0.0) {
            binding.etProductPrice.error = "Price must be more than 0"
            return false
        }
        return true
    }

    private fun showConfirmationDialog() {
        val builder = AlertDialog.Builder(requireContext())
        builder.setTitle("Confirmation")
            .setMessage("Confirm upload product?")
            .setPositiveButton("Upload") { _, _ ->
                addProduct()
            }
            .setNegativeButton("Cancel") { dialog, _ ->
                dialog.dismiss()
            }
            .show()
    }
}